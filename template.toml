# Template document for helix color schemes
# See also: https://docs.helix-editor.com/themes.html
# 
# NOTE: not all keys are necessary for example: ui.cursor.insert will default to ui.cursor
# if you want to comment it out
#
# Glossary:
# status bar: the strip at the bottom of the screen, showing mode, file name, etc.
# gutter: the line below the status bar
#
# Most lines have a comment describing what it relates to,
# unless they are very self-explanatory.
#
# Comments with a '?' are ones I haven't figured out yet.
#
# Comments with a '*' are ones I think are right, but
# not 100% definite
#
# INDEX:
# General
# UI
# Syntax
# Markdown
# Markdown - Interface
# Diff
# Palette

# GENERAL ==============================

warning = { } # Editor warnings
error = { } # Editor errors, like mis-typing a command; try typing asdf into command mode
info = { } # Code diagnostic info in gutter (LSP)
# ? Difference between info and hint ?
hint = { } # Code diagnostics hint in gutter (LSP)
diagnostic = { } # Code diagnostics in editing area (LSP)

# UI ==============================
# For styling helix itself.

'ui.background' = { } # Default background color
'ui.window' = { } # ?

'ui.text' = { } # Default text color
'ui.text.focus' = { } # Selection highlight in buffer-picker or file-picker
'ui.text.info' = { } # Info popup contents (space mode menue)

'ui.cursor' = { }
'ui.cursor.insert' = { } # The cursor in insert mode (i)
'ui.cursor.select' = { } # The cursor in select mode (v)
'ui.cursor.match' = { } # The matching parentheses of that under the cursor

'ui.selection' = { } # All currently selected text
'ui.selection.primary' # The primary selection when there are multiple

'ui.linenr' = { } # Line numbers
'ui.linenr.selected' = { } # Current line number

'ui.statusline' = { } # Status line
'ui.statusline.inactive' = { } # Status line in unfocused buffers

'ui.menu' = { } # Autocomplete menu
'ui.menu.selected' = { } # Selected autocomplete item

'ui.popup' = { } # Documentation popups (space-k)
'ui.popup.info' = { } # Info popups box (space mode menue)


# SYNTAX HIGHLIGHTING ==============================
# All the keys here are Treesitter scopes

'type' = { } # Variable type, like integer or string, including program defined classes, structs etc.
'type.builtin' = { } # Language provided types, e.g `integer`, `string`, `char`...

'constructor' = { } # Constructor method for a class or struct

'constant' = { } # Constant value
'constant.builtin' = { } # Special constants like `true`, `false`, `none`, etc.
'constant.builtin.boolean' = { } # True or False
'constant.character' = { } # Constant of character type
'constant.character.escape' = { } # ...?
'constant.number'  = { } # constant integer or float value
'constant.number.integer' = { } # constant integer value
'constant.number.float' = { } # constant float value

'string' = { } # String literal
'string.regexp' = { } # Regular expressions
'string.special' = { } # Strings containing a path, URL, etc.
'string.special.path' = { } # String containing a file path
'string.special.url' = { } # String containing a web URL
'string.special.symbol' = { } # Erlang/Elixir atoms, Ruby symbols, Clojure keywords

'comment' = { } # This is a comment
'comment.line' = { } # Line comments, like this
'comment.block' = { } # Block comments, like /* this */ in some languages
'comment.block.documentation' = { } # Doc comments, e.g '///' in rust

'variable' = { } # Variable names
'variable.builtin' = { } # Language reserved variables: `this`, `self`, `super`, etc.
'variable.parameter' = { } # Funtion parameters
'variable.other.member' = { } # Fields of composite data types (e.g. structs, unions)
'variable.function' = { } # ?

'label' = { } # ?

'punctuation' = { } # (){}[]:;,.
'punctuation.delimeter' = { } # Commas and colons
'punctuation.bracket' = { } # Parentheses, angle brackets...

'keyword' # Language reserved keywords
'keyword.control' = { } # Control keywords
'keyword.control.conditional' = { } # 'if', 'else', 'elif'
'keyword.control.repeat' = { } # 'for', 'while', 'loop'
'keyword.control.import' = { } # 'import', 'export' ('use'?)
'keyword.control.return' = { } # 'return' in most languages
'keyword.control.exception' = { } # 'raise' in python
'keyword.operator' = { } # 'or', 'and', 'in'
'keyword.directive' = { } # Preprocessor directives (#if in C)
'keyword.function' = { } # The keyword to define a funtion: 'def', 'fun', 'fn'

'operator' = { } # Logical (&&, ||) and - I assume - Mathematical (+, %) operators

'function' = { }
'function.builtin' = { }
'function.method' = { } # Class / Struct methods
'function.macro' = { } # Like macros in rust
'function.special' = { } # Preprocessor in C

'tag' = { } # As in <body> for html

'namespace' = { } # * Namespace keyword in java, C#, etc.


# Markup ==============================
# Colors for markup languages, like markdown or XML

'markup.heading' = { }
'markup.heading.marker' # ?
'markup.heading.1' = { }
# ... (2 - 5)
'markup.heading.6' = { }

'markup.list' = { }
'markup.list.numbered' = { } # Numbered list
'markup.list.unnumbered' = { } # Bullet point list

'markup.bold' = { }
'markup.italic' = { }

'markup.link' = { }
'markup.link.url' = { } # "Urls pointed to by links"
'markup.link.label' = { } # "Non-URL link references"
'markup.link.text' = { } # "URL and image descriptions in links"

'markup.quote' = { }

'markup.raw' = { } # ?
'markup.raw.inline' = { } # ?
'markup.raw.block' = { } # ?


# Markup - Interface ==============================
# "These scopes are used for theming the editor interface."

'markup.normal' = { }
'markup.normal.completion' = { } # "for completion doc popup ui"
'markup.normal.raw' = { } # "for hover popup ui"

'markup.heading' = { } # ?
'markup.heading.completion' = { } # "for completion doc popup ui"
'markup.heading.raw' = { } # "for hover popup ui"

'markup.raw' = { } # ?
'markup.raw.inline' = { } # ?
'markup.raw.inline.completion' = { } # ?
'markup.raw.inline.hover' = { } # ?

# Diff ==============================
# Version control changes

'diff.plus' = { } # Additions
'diff.minus' = { } # Deletions
'diff.delta' = { } # Modifications
'diff.delta.moved' = { } # Renamed or moved files / changes


[palette] # Define your custom colors here.
# 'color' = '#ffffff'

